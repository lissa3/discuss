"""
Django settings for united project.

Generated by 'django-admin startproject' using Django 3.0.7.
"""

import os
from datetime import timedelta

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

DEBUG = True

ALLOWED_HOSTS = []


INSTALLED_APPS = [
    'corsheaders',# tip from hivit
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #third parties auth:allauth        
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    #third parties auth: djoser
    'djoser',
    #jwt
    'rest_framework_simplejwt',#Brian (djoser social)
    'rest_framework_simplejwt.token_blacklist',# brian(djoser social)for smooth migrations
    # third parties 
    'bootstrap4',
    'taggit',
    'mptt',
    #rest
    'rest_framework',
    'corsheaders',
    #custom
    'users.apps.UsersConfig',
    'profiles.apps.ProfilesConfig',
    'ideas.apps.IdeasConfig',
    'utils',    
    'comments.apps.CommentsConfig',
    
     
]

MIDDLEWARE = [
    # on the top: Brian (via djoser + social)
    'social_django.middleware.SocialAuthExceptionMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ORIGIN_WHITELIST = (
    # TODO - set this  for production
    'http://127.0.0.1:8080',
    'http://localhost:8080'
)

ROOT_URLCONF = 'united.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates',],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # Brian (djoser + social)
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
                
            ],
        },
    },
]

WSGI_APPLICATION = 'united.wsgi.application'


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = "users.User" 

AUTHENTICATION_BACKENDS = [
        # Needed to login by email in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
    
]
SITE_ID = 1

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_USER_MODEL_USERNAME_FIELD = None

ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = "mandatory" # "optional" # 'mandatory','none'

########## GMAIL ############################
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = os.environ.get("MY_EMAIL")
EMAIL_HOST_PASSWORD = ""
##############################################

########## Twilio SendGrid ###################

#EMAIL_PORT = 587 
#EMAIL_HOST = 'smtp.sendgrid.net'
#EMAIL_HOST_USER = 'apikey'
#EMAIL_HOST_PASSWORD = '...7E'
#################################################

EMAIL_USE_TLS = True

ACCOUNT_EMAIL_SUBJECT_PREFIX = "Site"
ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT = 60

# where goes rÐµ-direct after login
ACCOUNT_AUTHENTICATED_LOGIN_REDIRECTS=True
LOGIN_REDIRECT_URL ='/'

LOGIN_URL = '/accounts/login'

ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS=5 # defa

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# JWT

SIMPLE_JWT = {
    # 'ACCESS_TOKEN_LIFETIME': timedelta(days=14),
    # short timespan for testing func
    'REFRESH_TOKEN_LIFETIME': timedelta(minutes=2),#days=21),
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=1),
    # 'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'AUTH_HEADER_TYPES': ('JWT'),
    # 'AUTH_HEADER_TYPES': ('JWT','Bearer',),# djoser needs bearer|=> jwt
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    # Brian djoser+auth
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}
#djoser

DJOSER = {
    # 'SET_USERNAME_RETYPE': False,
    'SET_PASSWORD_RETYPE': True,#re_password (instead of password2)
    'LOGIN_FIELD': 'email',
    # 'LOGIN_FIELD': 'username' (if User model with username)
    'SEND_ACTIVATION_EMAIL': True,
    'ACTIVATION_URL': 'activate/{uid}/{token}',
    'USER_CREATE_PASSWORD_RETYPE': True,
    # 'USERNAME_CHANGED_EMAIL_CONFIRMATION': True,
    'PASSWORD_CHANGED_EMAIL_CONFIRMATION': True,
    'SEND_CONFIRMATION_EMAIL': True,
    'PASSWORD_RESET_SHOW_EMAIL_NOT_FOUND':False, # user won't see  if email in db(err400)
    'PASSWORD_RESET_CONFIRM_URL': 'password/reset/confirm/{uid}/{token}', 
    # social auth
    'SOCIAL_AUTH_TOKEN_STRATEGY':'djoser.social.token.jwt.TokenStrategy',
    'SOCIAL_AUTH_ALLOWED_REDIRECT_URIS':['http://localhost:8000'],
    'SERIALIZERS': {
        'user_create': 'api.account.user_serializer.UserCreateSerializer',
        'user': 'api.account.user_serializer.UserCreateSerializer',
        'current_user':'account.user_serializer.UserCreateSerializer',
        # from djoser ser-er
        'user_delete': 'djoser.serializers.UserDeleteSerializer',
        
    },
}
# taggit
TAGGIT_CASE_INSENSITIVE = True

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR,'static'),]


MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR,'media')

